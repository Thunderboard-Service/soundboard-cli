name: CI

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - i686-pc-windows-gnu
          - i686-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Install x86 Build Dependencies
        if: ${{ matrix.target == 'i686-pc-windows-gnu' || matrix.target == 'i686-unknown-linux-gnu' }}
        run: sudo dpkg --add-architecture i386 && sudo apt-get update && sudo apt-get install libssl-dev:i386 clang gcc-multilib
      - name: Install x86_64 Build Dependencies
        if: ${{ matrix.target != 'i686-pc-windows-gnu' && matrix.target != 'i686-unknown-linux-gnu' }}
        run: sudo apt-get update && sudo apt-get install pkg-config libssl-dev clang
      - name: Install Windows cross-compilation tools
        if: ${{ matrix.target == 'x86_64-pc-windows-gnu' || matrix.target == 'i686-pc-windows-gnu' }}
        run: sudo apt-get install -y mingw-w64
      - name: Install macOS cross-compilation tools
        if: ${{ matrix.target == 'x86_64-apple-darwin' }}
        run: |
          git clone https://github.com/tpoechtrager/osxcross.git
          cd osxcross
          wget -P tarballs https://s3.dockerproject.org/darwin/v2/MacOSX10.10.sdk.tar.xz
          UNATTENDED=yes OSX_VERSION_MIN=10.6 ./build.sh
          echo "OSXCROSS_PATH=$PWD/target/bin" >> $GITHUB_ENV
      - name: Build x86
        uses: actions-rs/cargo@v1
        if: ${{ matrix.target == 'i686-pc-windows-gnu' || matrix.target == 'i686-unknown-linux-gnu' }}
        env:
          TARGET_CC: clang
          OPENSSL_LIB_DIR: /usr/lib/i386-linux-gnu/
          OPENSSL_INCLUDE_DIR: /usr/include/openssl/
        with:
          command: build
          args: --release --target=${{ matrix.target }}
      - name: Build x86_64
        uses: actions-rs/cargo@v1
        if: ${{ matrix.target != 'i686-pc-windows-gnu' && matrix.target != 'i686-unknown-linux-gnu' }}
        env:
          TARGET_CC: clang
        with:
          command: build
          args: --release --target=${{ matrix.target }}
      - name: Build archive
        shell: bash
        run: |
          binary_name="thunderboard-cli"
          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ] || [ "${{ matrix.target }}" = "i686-pc-windows-gnu" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ] || [ "${{ matrix.target }}" = "i686-pc-windows-gnu" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}